name,重要程度,所属章节,知识点描述
Java语言基础,4,1~5,Java是由Sun Microsystems公司于1995年5月推出的Java面向对象程序设计语言和Java平台的总称。由James Gosling和同事们共同研发，并在1995年正式推出。一个Java程序的基本结构大体可以分为包、类、main()主方法、标识符、关键字、语句和注释等。
Java面向对象,3,6~11,面向对象（Object Oriented）是一种新兴的程序设计方法，或者是一种新的程序设计规范(paradigm)，其基本思想是使用对象、类、继承、封装、多态等基本概念来进行程序设计。从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式。
字符串,4,4、10,"字符串是Java中特殊的类,使用方法像一般的基本数据类型，被广泛应用在 Java编程中。"
StringBuilder类,4,10,StringBuilder类每次操作都是对自身对象进行操作，而不是生成新的对象，其所占空间会随着内容的增加而扩充，这样，在做大量的修改操作时，不会因生成大量匿名对象而影响系统性能。
String类,4,10,字符串广泛应用在Java编程中，在Java中字符串属于对象，Java提供了String类来创建和操作字符串。
创建对象,4,10,"Java中String是一个特殊的包装类数据有两种创建形式：（1）String s = ""abc"";（2）String s = new String(""abc"");    "
String类常用操作,4,4,在Java中字符串属于对象，Java提供了 String类来创建和操作字符串。
取字符,4,4,（1）char charAt(int index) 返回指定索引处的 char 值（2）int indexOf(int ch) 返回指定字符在此字符串中第一次出现处的索引……
大小比较,4,4,int compareTo(String anotherString) 按字典顺序比较两个字符串。
拆分,4,4,String split(String regex)将字符串以regex拆分成数组。
查找,4,4,（1）contains()；（2）使用indexOf()方法进行位置查找。
求子串,4,4,"Java String类中的substring()方法实现对字符串从指定的索引位置开始截取,直到此字符串的末尾,并返回一个新的字符串。"
求长度,4,4,"在Java中,要获取字符串的长度,可以使用 String类的 length()方法,其语法形式如下:字符串名.length()。"
相等比较,4,4,（1）equals：比较两个String对象的值是否相等；（2）= =：比较两个String对象的指向的内存地址是否相等。
组合,4,4,要么选择长度为n的字符串中的第一个字符，那么要在其余的长度n-1的字符串中选择m-1个字符；要么不选择长度为n的字符串中的第一个字符，那么要在其余的长度n-1的字符串中选择m个字符。
转数组,4,4,string.toCharArray()
命令行参数,4,1,"java命令行参数是一个参数,即在运行java程序时传递的参数。从控制台传递的参数可以在java程序中接收,并且可以用作输入。"
格式化输出,4,1,"（1）一般方式：System.out.println(""x = "" + x + "", y = "" + y);（2）printf()方式：System.out.printf(""x = %d, y = %f\n"", x, y);（3）format()方式：System.out.format(""x = %d, y = %f\n"", x, y)。"
数据类型,2,1,基本数据类型：（1）数值型：整型、浮点型、字符型：char、布尔型：boolean（2）引用数据类型：类（class）、接口（interface）、数组（[]）
变量,2,2,"Java中的变量:1、成员变量(实例变量,属性)2、本地变量(局部变量)3、类变量(静态属性)。"
关键字,2,2,Java的关键字对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，关键字不能用作变量名、方法名、类名、包名和参数。
变量三要素,2,2,变量的三要素:变量类型、变量名字和变量值。
标识符,2,2,Java语言中，对于变量，常量，函数，语句块也有名字，我们统统称之为Java标识符。标识符是用来给类、对象、方法、变量、接口和自定义数据类型命名的。
变量的基本类型,2,2,Java语言支持的变量类型有局部变量、实例变量、类变量。
单浮点型,2,2,单精度浮点数在机内占4个字节、有效数字8位、表示范围：-3.40E+38 ~ +3.40E+38
双浮点型,2,2,double数据类型使用64位来存储浮点数。double值也称为双精度浮点数。它可以表示数量小到4.9 x 10-324和大到1.7 x 10308大小。它可以是正的或负的。所有实数被称为双精度字面量。双精度字面量可以可选地以d或D结尾，例如1.27d。
字符型,2,2,char数据类型是16位无符号Java基元数据类型。它表示Unicode字符。请注意，char是无符号数据类型。因此，char变量不能为负值。字符数据类型的范围为0到65535，这与Unicode集的范围相同。
字节型,2,2,字节数据类型是8位有符号Java原语整数数据类型。其范围为-128至127，字节类型是Java中可用的最小整数数据类型。
布尔型,2,2,布尔数据类型只有两个有效值:true和false。这两个值称为布尔值字面量。
整型,2,2,"int数据类型是32位有符号Java原语数据类型。int数据类型的变量需要32位内存。其有效范围为-2,147,483,648至2,147,483,647（-231至231 - 1）。"
短整型,2,2,short数据类型是16位有符号Java原语整数数据类型。 其范围是-32768至32767(或-2 15 15 - 1)。没有short字面量。但是，我们可以将任何位于short（-32768到32767）范围内的int字面量分配给一个短变量。
长整型,2,2,"long数据类型是64位有符号Java原始数据类型。当对整数的计算结果可能超出int数据类型的范围时使用。其范围是 -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807。"
数据类型转换,3,2,数据类型的转换，分为自动转换和强制转换。自动转换是程序在执行过程中“悄然”进行的转换，不需要用户提前声明，一般是从位数低的类型向位数高的类型转换；强制类型转换则必须在代码中声明，转换顺序不受限制。
强制类型转换,3,2,强制类型转换是指：强制显示的把一个数据类型转换为另外一种数据类型。
自动类型转换,4,2,自动类型转换是指：数字表示范围小的数据类型可以自动转换成范围大的数据类型。
读取键盘输入,4,2,Scanner类不仅可以读取键盘输入值，也可以读取文件内容，只需要将构造方法中的数据来源切换成该文件即可。
创建scanner对象,4,2,Scanner sc = new Scanner(System.in);
调入scanner类,4,2,import java.util.Scanner;
调用next方法,4,2,数组对于每一门编程语言来说都是重要的数据结构之一，当然不同语言对数组的实现及处理也不尽相同。Java 语言中提供的数组是用来存储固定大小的同类型元素。
数组,3,7,Java语言中提供的数组是用来存储固定大小的同类型元素。
数组的基本操作,3,7,java.util包的Arrays类里面包含了用来操作数组(如排序和搜索)的各种方法。
使用数组,3,7,数组的访问通过索引完成，即：“数组名称[索引]”，但是需要注意的是，数组的索引从0开始，所以索引的范围就是0 ~ 数组长度-1。在 Java 中提供有一种动态取得数组长度的方式：数组名称.length。
元素复制,3,7,（1）将数组元素逐个复制到目标数组中；（2）使用System类的arraycopy()方法；（3）使用Arrays类的copyOf()方法和copyOfRange()方法。
元素迭代,3,7,Java集合类中的 List.iterator()方法用于返回按适当顺序在列表的元素上进行迭代的迭代器。方法返回值为 Iterator对象。
创建数组,3,7,Java语言使用new操作符来创建数组，语法如下：arrayRefVar = new dataType[arraySize];
删除,3,7,Java 的数组是固定长度的，无法直接删除，我们可以通过创建一个新数组，把原始数组中要保留的元素放到新数组中即可。
反转,3,7,"（1）使用集合个工具类：Collections.reverse(ArrayList) 将数组进行反转；（2）使用集合ArrayList实现反转：
（3）直接使用数组实现反转，即，反转后数组的第一个元素等于源数组的最后一个元素："
取字符,3,7,（1）使用Java类库中的方法System.arraycopy；（2）使用Java类库中的方法 java.util.Arrays.copyOf；（3）重写myCopy
插入,3,7,"（1）定义一个ArrayList数组，然后用add(element)方法往里添加元素，还可add(index,element)往指定下标处添加元素；（2）先把array转化为list，用list的add()方法添加元素，再把list转化为array；（3）创建一个新数组，新数组的大小为旧数组大小+1，把旧数组里的元素copy一份进新数组，并把要添加的元素添加进新数组。"
改字符,3,7,JAVA中替换字符的方法replace和replaceAll。
数组排序,2,7,Arrays.sort()排序方法在java中是最简单且最常用的排序方法，其他排序方法还有冒泡排序、插入排序、选择排序等。
冒泡排序,2,7,简单来说，冒泡排序就是重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。
插入排序,2,7,通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。
选择排序,2,7,先找到最小元素所在位置的索引，然后将该元素与第一位上的元素进行交换。
查找,4,7,"（1）int indexOf(String str) ：返回第一次出现的指定子字符串在此字符串中的索引。（2）int indexOf(String str, int startIndex)：从指定的索引处开始，返回第一次出现的指定子字符串在此字符串中的索引。（3）int lastIndexOf(String str) ：返回在此字符串中最右边出现的指定子字符串的索引。（4）int lastIndexOf(String str, int startIndex) ：从指定的索引处开始向后搜索，返回在此字符串中最后一次出现的指定子字符串的索引。

 "
求容量,4,7,即计算Java数组的内存大小。
求长度,4,7,使用数组属性length来获取数组长度，即 array.length。
追加,4,7,首先创建一个比原来数组长度大的临时数组，然后将原来数组中的元素一一复制到临时数组，接着将需要添加的新元素添加到最后的索引位置，最后将临时数组地址指针引用赋值给原数组即可。
数组的基本类型,4,7,
一维数组,3,7,"当数组中每个元素都只带有一个下标时,这种数组就是一维数组。一维数组(one-dimensional array)实质上是一组相同类型数据的线性集合,是数组中最简单的一种数组。"
多维数组,3,8,多维数组(multidimensional array)的维数大于1。多维数组可以理解为“数组的数组” 。
运算符,3,2,计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操纵变量。我们可以把运算符分成以下几组：算术运算符、关系运算符、位运算符、逻辑运算符、赋值运算符、其他运算符。
位运算符,3,2,"位运算符主要针对二进制,它包括了:“与”、“非”、“或”、“异或”。"
位逻辑,3,2,"位逻辑运算通常是针对两个数而言,实行位操作;而条件逻辑运算是针对两个条件表达式而言,实行条件操作。"
按位与,3,2,与运算符用符号“&”表示，其使用规律如下：两个操作数中位都为1，结果才为1，否则结果为0。
按位取反,3,2,非运算符用符号“~”表示，其运算规律如下：如果位为0，结果是1，如果位为1，结果是0。
按位异或,3,2,异或运算符是用符号“^”表示的，其运算规律是：两个操作数的位中，相同则结果为0，不同则结果为1。
按位或,3,2,或运算符用符号“|”表示，其运算规律如下：两个位只要有一个为1，那么结果就是1，否则就为0。
移位,3,2,"java中有三种移位运算符（1）<<: 左移运算符，num << 1,相当于num乘以2；（2）>>: 右移运算符，num >> 1,相当于num除以2；（3）>>>: 无符号右移，忽略符号位，空位都以0补齐。"
关系运算符,3,2,关系运算符(relational operators)也可以称为“比较运算符 ”，用于用来比较判断两个变量或常量的大小。
算术运算符,3,2,算术运算符主要用于进行基本的算术运算，如加法、减法、乘法、除法等。
赋值运算符,3,2,赋值运算符是指为变量或常量指定数值的符号。如可以使用 “=” 将右边的表达式结果赋给左边的操作数。
逻辑运算符,3,2,（1）&和&&：当且仅当 a、b 都为 true 时，结果为 true ；（2）| 和 || ：当且仅当 a、b 都为 false 时，结果为 false ；（3）^ : a 与 b 相异时，结果为 true 
选择结构,4,3,选择结构是指选择某一条件后，才能决定下一步做什么。
if结构,4,3,一个 if 语句包含一个布尔表达式和一条或多条语句。如果布尔表达式的值为 true，则执行 if 语句中的代码块，否则执行 if 语句块后面的代码。
switch结构,4,3,switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。
循环结构,4,5,顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次，就需要使用循环结构。Java中有三种主要的循环结构：while 循环、do…while循环、for 循环
do while循环,4,5,对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。
for循环,4,5,虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句——for 循环，使一些循环结构变得更加简单。for循环执行的次数是在执行前就确定的。
while循环,4,5,while是最基本的循环，只要布尔表达式为 true，循环就会一直执行下去。
增强for循环,1,5,增强for循环是for循环的一种，简化了数组和集合的遍历，可以用来替代迭代器增强型for循环定义如下：for(ElementType element: arrayName){};
循环中嵌套循环,1,5,如果把一个循环放在另一个循环体内，那么就可以形成嵌套循环。
无限循环,1,5,无限循环有for（；；）、while（true）、for（；true；）
跳转语句,1,5,Java 支持 3 种跳转语句：break，continue 和return 。
面向对象,2,9,面向对象编程是当今主流的程序设计思想，已经取代了过程化程序开发技术，Java 是完全面向对象编程语言，所以必须熟悉面向对象才能够编写 Java 程序。
内部类,2,9,在 Java 中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。
匿名内部类,2,9,匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。
局部内部类,2,9,局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。
成员内部类,2,9,成员内部类是最普通的内部类，它的定义为位于另一个类的内部。成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。
静态内部类,2,9,静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法。
异常处理,2,9,异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。Java的异常处理本质上是抛出异常和捕获异常。
接口,2,13,接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。一个类通过继承接口的方式，从而来继承接口的抽象方法。
成员,2,9,Java的基本单位是类，Java成员即类中的成员，包括以下五个部分：变量、方法、构造器、初始化块、内部类。
常量,2,9,"所谓常量可以理解成一种特殊的变量,它的值被设定后,在程序运行过程中不允许被改变。final 常量名=值; "
抽象方法,2,9,用abstract修饰的方法，即抽象方法。
静态方法,2,9,在类中使用static修饰的静态方法会随着类的定义而被分配和装载入内存中。
默认方法,2,9,默认方法是在接口中的方法签名前加上了default 关键字的实现方法。
枚举类型,2,9,枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，用于定义变量，以限制变量的赋值。
泛型与集合,2,19、21,所有集合类都位于java.util包中，集合中只能保存对象的引用。集合类把它所含有的元素看成是Object的实例，这样方便但是也有隐患，即多个类型不同的元素被放入一个集合中，会增加集合访问时类型转换的困难，甚至会产生错误。泛型的引入改善了这种情况，使用泛型来限制集合里元素的类型，并让集合记住元素的类型。这样可以允许编译器检查加入集合的元素类型，避免值类型不一致的错误。
Collection,2,19,Java使用集合来组织和管理对象。
List,2,19,List代表有序、可重复集合。
Map,2,19,Map代表具有映射关系元素的集合。
queue,2,19,Queue代表队列，实现元素的先进先出管理。
Set,2,19,Set代表无序、不可重复集合。
Stream_API,2,19,三种常用API：（1）集合-->Stream：stream()；（2）数组-->Stream：Stream.of(T t)或者Arrays.stream(T[] t)；（3）任意元素-->Stream：Stream.of(T... values)
泛型,2,21,泛型允许在定义类、接口和方法时使类型（类、接口）成为参数，声明的类型参数在使用时用具体的类型替换。泛型主要应用在集合框架中。
注解类型,2,1,Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。
类和对象,2,9,类是用来描述实体的“模板”或者原型；对象是实际的实体，每一个对象都是类的一个具体实例。
final关键字,2,9,在Java中，final关键字可以用来修饰类、方法和变量（包括成员变量和局部变量）。
super关键字,2,9,"java中的super关键字是一个引用变量,用于引用直接父类对象。"
使用类,2,9,类是对某一类事物的描述，是抽象的、概念上的意义，对象是实际存在的该类事物的每一个个体，也被称为实例。使用一个类，其实就是使用该类的成员(成员变量和成员方法)。
包与类的导入,2,9,导入（import），使用在同一个包下的类不需要导入可以直接用，使用不同的包下的类才需要导入。
对象初始化和销毁,2,9,java对象初始化与对象销毁的顺序的相反的。
抽象类,2,9,在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
方法覆盖,2,6,方法覆盖（Overriding）是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。
方法重载,2,6,方法重载（Overloading）发生在同一个类里面两个或者多个方法的方法名相同但是参数不同的情况。
类体,2,9,类体中包括成员变量的声明和方法的定义，成员变量又分为实例变量和类变量，定义的方法可分为实例方法和类方法。
类声明,2,9,声明一个类需要通过一个关键字class。
继承的实现,2,9,继承描述的是一种能力：可以使用现有类的所有功能，并在无需重新编写原有类的情况下进行功能上的扩展。要使用继承，必须满足 is-a 原则(代码复用)，定义的语法为：子类 extends 父类。其中，子类：又称为派生类，子类一定具有父类的全部属性与行为，并且拥有的属性更多，具有的行为更加丰富，表示的范围更小。父类：又称为超类。
访问修饰符,2,9,Java面向对象的基本思想之一是封装细节并且公开接口。Java语言采用访问控制修饰符来控制类及类的方法和变量的访问权限，从而向使用者暴露接口，但隐藏实现细节。访问控制分为四种级别：（1）public（2）protected（3）default（4）private：
静态成员,2,9,静态成员是一组比较特殊的成员，它不属于某个特定的类实例，而是属于一个类所有，这个类的所有实例共享它们。类的静态成员，指的是用static修饰的成员，主要有三种：静态变量、静态方法和静态代码块。
继承,2,11,继承是一种连接类的层次模型，继承的目的在于鼓励重用。继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的。
多态,2,11,指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。
输入/输出,2,10,输入流只能进行读操作，输出流只能进行写操作，程序中需要根据待传输数据的不同特性而使用不同的流。InputStream 是所有的输入字节流的父类，它是一个抽象类。OutputStream 是所有的输出字节流的父类，它也是一个抽象类。