{"类": {"key": ["类"], "property": ["subclassof"], "to_name": ["多态"], "重要程度": [4], "所属章节": [4], "知识点描述": ["类（Class）是面向对象程序设计（OOP，Object-Oriented Programming）实现信息封装的基础。类是一种用户定义的引用数据类型，也称类类型。每个类包含数据说明和一组操作数据或传递消息的函数。类的实例称为对象。"]}, "对象": {"key": ["对象"], "property": ["subclassof"], "to_name": ["多态"], "重要程度": [4], "所属章节": [4], "知识点描述": ["对象是人们要进行研究的任何事物，从最简单的整数到复杂的飞机等均可看作对象，它不仅能表示具体的事物，还能表示抽象的规则、计划或事件。类是一系列事物的统称，对象就是类具体化的实例"]}, "多态": {"key": ["多态"], "property": ["subclassof"], "to_name": ["抽象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["面向对象(Object Oriented)是软件开发方法。面向对象的概念和应用已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD技术、人工智能等领域。面向对象是一种对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物"]}, "封装": {"key": ["封装"], "property": ["subclassof"], "to_name": ["抽象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["将数据隐藏起来，隐藏起来然后对外提供操作该数据的接口，然后我们可以在接口附加上对该数据操作的限制，以此完成对数据属性操作的严格控制。"]}, "继承": {"key": ["继承"], "property": ["subclassof"], "to_name": ["抽象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["它可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。"]}, "抽象": {"key": ["抽象"], "property": ["subclassof"], "to_name": ["面向对象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["抽象类是一个特殊的类，只能被继承，不能实例化"]}, "模块": {"key": ["模块"], "property": ["subclassof"], "to_name": ["面向对象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["一个.py文件就是一个模块。"]}, "函数": {"key": ["函数"], "property": ["subclassof"], "to_name": ["面向对象"], "重要程度": [4], "所属章节": [4], "知识点描述": ["函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。"]}, "异常": {"key": ["异常"], "property": ["subclassof"], "to_name": ["面向对象"], "重要程度": [4], "所属章节": [6], "知识点描述": ["程序在运行时，如果Python 解释器遇到到一个错误，会停止程序的执行，并且提示一些错误信息，这就是异常"]}, "内建函数": {"key": ["内建函数"], "property": ["type"], "to_name": ["函数"], "重要程度": [3], "所属章节": [5], "知识点描述": ["内建函数是python解释器内置的函数，由cpython执行的c语言编写的函数，在加载速度上优于开发者自定义的函数"]}, "随机函数": {"key": ["随机函数"], "property": ["type"], "to_name": ["函数"], "重要程度": [3], "所属章节": [5], "知识点描述": ["Python中的 random模块用于生成随机数，它提供了很多函数"]}, "面向对象": {"key": ["面向对象"], "property": ["subclassof"], "to_name": ["name"], "重要程度": [4], "所属章节": [4], "知识点描述": ["面向对象是一种编程思想，是对现实世界中一类事物的抽象，在编程中可以理解为是一种建立现实世界事物的模型"]}, "高级应用": {"key": ["高级应用"], "property": ["subclassof"], "to_name": ["name"], "重要程度": [4], "所属章节": [7], "知识点描述": [NaN]}, "异步编程": {"key": ["异步编程"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [3], "所属章节": [7], "知识点描述": ["以进程、线程、协程、函数/方法作为执行任务程序的基本单位，结合回调、事件循环、信号量等机制，以提高程序整体执行效率和并发能力的编程方式。"]}, "网络爬虫": {"key": ["网络爬虫"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [4], "所属章节": [7], "知识点描述": ["网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。这是百度百科对爬虫的定义，其实，说简单点，爬虫就是利用写好的程序自动的提取网页的信息。"]}, "闭包": {"key": ["闭包"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [2], "所属章节": [7], "知识点描述": ["在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。"]}, "装饰器": {"key": ["装饰器"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [2], "所属章节": [7], "知识点描述": ["装饰器是一种特殊的函数，它输入一个函数输出一个函数，可用于给一个函数附加一些功能"]}, "文件": {"key": ["文件"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [3], "所属章节": [5], "知识点描述": ["计算机的文件，就是存储在某种长期储存设备上的一段数据"]}, "Lambda表达式": {"key": ["Lambda表达式"], "property": ["subclassof"], "to_name": ["高级应用"], "重要程度": [3], "所属章节": [5], "知识点描述": ["Lambda 表达式（lambda expression）是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象（lambda abstraction），是一个匿名函数，即没有函数名的函数。"]}, "语言基础": {"key": ["语言基础"], "property": ["subclassof"], "to_name": ["name"], "重要程度": [4], "所属章节": [2], "知识点描述": [NaN]}, "输入输出": {"key": ["输入输出"], "property": ["subclassof"], "to_name": ["语言基础"], "重要程度": [3], "所属章节": [2], "知识点描述": ["输入输出（input/output，I/O），读作“eye-oh”，描述的是在计算机上输入输出数据的操作系统、程序或设备。"]}, "数据类型": {"key": ["数据类型"], "property": ["subclassof"], "to_name": ["语言基础"], "重要程度": [4], "所属章节": [2], "知识点描述": [NaN]}, "不可变类型": {"key": ["不可变类型"], "property": ["type"], "to_name": ["数据类型"], "重要程度": [2], "所属章节": [2], "知识点描述": ["当该数据类型的对应变量的值发生了改变，那么它对应的内存地址也会发生改变，对于这种数据类型，就称不可变数据类型。"]}, "容器类型": {"key": ["容器类型"], "property": ["type"], "to_name": ["数据类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["容器是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用in, not in关键字判断元素是否包含在容器中。"]}, "float": {"key": ["float"], "property": ["type"], "to_name": ["不可变类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["浮点型数据类型，FLOAT 数据类型用于存储单精度浮点数或双精度浮点数。"]}, "complex": {"key": ["complex"], "property": ["type"], "to_name": ["不可变类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["复数类型，复数存放的是一对浮点数，一个表示实数部分，另一个表示虚数部分"]}, "int": {"key": ["int"], "property": ["type"], "to_name": ["不可变类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["程序中用的最多是一般整数类型（简称“整数类型”或“整型”）和长整数类型（简称“长整型”），整数类型的类型名是“int”，长整型的类型名为“long int”,可简写为“long”，int和long都是关键字。"]}, "bool": {"key": ["bool"], "property": ["type"], "to_name": ["不可变类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["bool表示布尔型变量，也就是逻辑型变量的定义符"]}, "tuple": {"key": ["tuple"], "property": ["type"], "to_name": ["容器类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行"]}, "sets": {"key": ["sets"], "property": ["type"], "to_name": ["容器类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["set是一个无序且不重复的元素集合"]}, "string": {"key": ["string"], "property": ["type"], "to_name": ["容器类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["浮点型数据类型，FLOAT 数据类型用于存储单精度浮点数或双精度浮点数。"]}, "list": {"key": ["list"], "property": ["type"], "to_name": ["容器类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["列表由一系列特定顺序排列的元素组成"]}, "dictionary": {"key": ["dictionary"], "property": ["type"], "to_name": ["容器类型"], "重要程度": [4], "所属章节": [2], "知识点描述": ["字典是另一种可变容器模型，且可存储任意类型对象。"]}, "程序控制结构": {"key": ["程序控制结构"], "property": ["subclassof"], "to_name": ["语言基础"], "重要程度": [4], "所属章节": [3], "知识点描述": ["程序控制方式是指在程序控制下进行的数据传递方式 [1]  。程序控制结构是指以某种顺序执行的一系列动作，用于解决某个问题"]}, "循环结构": {"key": ["循环结构"], "property": ["type"], "to_name": ["程序控制结构"], "重要程度": [4], "所属章节": [3], "知识点描述": ["循环结构是指在程序中需要反复执行某个功能而设置的一种程序结构。它由循环体中的条件，判断继续执行某个功能还是退出循环"]}, "顺序结构": {"key": ["顺序结构"], "property": ["type"], "to_name": ["程序控制结构"], "重要程度": [4], "所属章节": [3], "知识点描述": ["顺序结构是最简单的程序结构，也是最常用的程序结构，它的执行顺序是自上而下，依次执行"]}, "选择结构": {"key": ["选择结构"], "property": ["type"], "to_name": ["程序控制结构"], "重要程度": [4], "所属章节": [3], "知识点描述": ["选择结构用于判断给定的条件，根据判断的结果判断某些条件，根据判断的结果来控制程序的流程。"]}, "语句": {"key": ["语句"], "property": ["subclassof"], "to_name": ["语言基础"], "重要程度": [4], "所属章节": [3], "知识点描述": ["一个语法上自成体系的单位，它由一个词或句法上有关连的一组词构成，表达一种主张、疑问、命令、愿望或感叹。"]}, "条件语句": {"key": ["条件语句"], "property": ["type"], "to_name": ["语句"], "重要程度": [4], "所属章节": [3], "知识点描述": ["条件语句是用来判断给定的条件是否满足(表达式值是否为0)，并根据判断的结果(真或假)决定执行的语句，选择结构就是用条件语句来实现的。"]}, "循环语句": {"key": ["循环语句"], "property": ["type"], "to_name": ["语句"], "重要程度": [4], "所属章节": [3], "知识点描述": ["循环结构是在一定条件下反复执行某段程序的流程结构，被反复执行的程序被称为循环体。 [1]  循环语句是由循环体及循环的终止条件两部分组成的"]}, "if语句": {"key": ["if语句"], "property": ["type"], "to_name": ["语句"], "重要程度": [4], "所属章节": [3], "知识点描述": ["if语句是指编程语言（包括c语言、C#、VB、java、汇编语言等）中用来判定所给定的条件是否满足，根据判定的结果（真或假）决定执行给出的两种操作之一。"]}, "运算符": {"key": ["运算符"], "property": ["subclassof"], "to_name": ["语言基础"], "重要程度": [3], "所属章节": [2], "知识点描述": ["运算符用于执行程序代码运算，会针对一个以上操作数项目来进行运算"]}, "身份运算符": {"key": ["身份运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["判断是否引用自一个对象。主要是通过两个对象的存储单元id进行对比判断两个变量是否相同"]}, "逻辑运算符": {"key": ["逻辑运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["用于逻辑运算的符号，一般用于判断两个变量的交并集。一般返回一个布尔值。"]}, "成员运算符": {"key": ["成员运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["用于判断两个对象的是否存在包含关系，即一个对象中是否包含另外一个对象。其返回结尾为布尔值。"]}, "赋值运算符": {"key": ["赋值运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["赋值运算符是编程开发中最常用的运算符，即对一个对象进行赋值，将运算符右侧的值赋值给左侧的变量。其中赋值运算符与算术运算符可以在为变量赋值时增加算术运算功能。"]}, "算数运算符": {"key": ["算数运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["算术运算符主要是对两个对象进行算术计算的符号"]}, "位运算符": {"key": ["位运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["位运算符是对Python对象进行按照存储的Bit操作。其运算对象是二进制的格式。"]}, "比较运算符": {"key": ["比较运算符"], "property": ["type"], "to_name": ["运算符"], "重要程度": [3], "所属章节": [2], "知识点描述": ["对于两个对象进行比较（判断是否相同、大于或小于等运算），其运算对象可以是数值也可以是字符串。其结果返回布尔值"]}}